name: Install Server

inputs:
    server-version:
        description: "Server version to install"
        required: true
        type: string
    target:
        description: "Specified target toolchain, ex. x86_64-unknown-linux-gnu"
        type: string
        required: true

env:
    CARGO_TERM_COLOR: always

runs:
    using: "composite"

    steps:
        - name: "Setup Environment Variables"
          shell: bash
          env:
              SERVER_VERSION: ${{ inputs.server-version }}
              TARGET: ${{ inputs.target }}
          run: |
              echo "SERVER_VERSION=$SERVER_VERSION" >> $GITHUB_ENV
              echo "TARGET=${TARGET/pc-windows-msvc/unknown-linux-gnu}" >> $GITHUB_ENV # we use WSL on windows runners

        - name: Prepare Valkey sources
          shell: bash
          run: |
              echo "Cloning and checking out Valkey $SERVER_VERSION"
              if [[ -d valkey ]]; then
                  echo "Removing existing valkey directory..."
                  rm -fR valkey
              fi
              git clone https://github.com/valkey-io/valkey.git
              cd valkey/src
              git checkout $SERVER_VERSION
              SOURCES_VERSION=`grep ' VALKEY_VERSION ' version.h | grep -o -E '[0-9]+\.[0-9]\.[0-9]'` || :
              if [[ -z $SOURCES_VERSION ]]; then
                  SOURCES_VERSION=`grep ' REDIS_VERSION ' version.h | grep -o -E '[0-9]+\.[0-9]\.[0-9]'`
              fi
              echo "SOURCES_VERSION=$SOURCES_VERSION" >> $GITHUB_ENV

        - name: Setup WSL2 with Ubuntu
          if: ${{ contains(inputs.target, 'windows') }}
          shell: pwsh
          run: |
              wsl --install Ubuntu --no-launch
              wsl --set-default-version 2
              wsl --distribution Ubuntu --exec echo "WSL initialized"
              wsl --list --verbose

        - name: Configure WSL
          if: ${{ contains(inputs.target, 'windows') }}
          shell: bash
          run: |
              wsl bash << EOF
                set -e
                sudo apt-get update
                sudo apt-get install -y make python3 libssl-dev gcc dos2unix build-essential git pkg-config
              EOF

        - uses: actions/cache@v4
          id: cache-valkey
          with:
              path: |
                  valkey/src/valkey-server
                  valkey/src/valkey-cli
              key: valkey-${{ env.SOURCES_VERSION }}-${{ inputs.target }}

        # Manual install, because makefile target rebuilds everything, we want to avoid that
        - name: Install cached engine
          if: ${{ steps.cache-valkey.outputs.cache-hit == 'true' && !contains(inputs.target, 'windows') }}
          shell: bash
          run: |
              cd valkey/src
              if command -v sudo &> /dev/null
              then
                  echo "sudo command exists"
                  SUDO=sudo
              fi
              $SUDO cp valkey-server valkey-cli redis-server redis-cli /usr/local/bin/ 2>/dev/null || :
              if [[ ! -e /usr/local/bin/redis-server ]]; then
                  $SUDO cp valkey-server /usr/local/bin/redis-server
              fi
              echo /usr/local/bin >> $GITHUB_PATH

        - name: Install cached engine
          if: ${{ steps.cache-valkey.outputs.cache-hit == 'true' && contains(inputs.target, 'windows') }}
          shell: bash
          run: |
              wsl bash << EOF
                set -e
                cd valkey/src
                sudo cp valkey-server valkey-cli redis-server redis-cli /usr/local/bin/ 2>/dev/null || :
                if [[ ! -e /usr/local/bin/redis-server ]]; then
                    sudo cp valkey-server /usr/local/bin/redis-server
                fi
                echo 'export PATH=/usr/local/bin:$PATH' >> ~/.bash_profile
              EOF

        - name: Build and install engine
          if: ${{ steps.cache-valkey.outputs.cache-hit != 'true' && !contains(inputs.target, 'windows') }}
          shell: bash
          run: |
              cd valkey
              make BUILD_TLS=yes
              if command -v sudo &> /dev/null
              then
                  echo "sudo command exists"
                  sudo make install
              else
                  echo "sudo command does not exist"
                  make install
              fi
              echo /usr/local/bin >> $GITHUB_PATH

        - name: Build and install engine
          if: ${{ steps.cache-valkey.outputs.cache-hit != 'true' && contains(inputs.target, 'windows') }}
          shell: bash
          run: |
              wsl bash << EOF
                set -e
                cd valkey
                dos2unix src/mkreleasehdr.sh
                bash -c src/mkreleasehdr.sh
                make BUILD_TLS=yes
                sudo make install
                echo 'export PATH=/usr/local/bin:$PATH' >> ~/.bash_profile
              EOF

        - name: Verify Valkey installation and symlinks
          if: ${{ !contains(inputs.engine-version, '-rc') && !contains(inputs.target, 'windows') }}
          shell: bash
          run: |
              # In Valkey releases, the engine is built with symlinks from valkey-server and valkey-cli
              # to redis-server and redis-cli. This step ensures that the engine is properly installed
              # with the expected version and that Valkey symlinks are correctly created.
              INSTALLED_VER=$(redis-server -v) || INSTALLED_VER=$(valkey-server -v)
              if [[ $INSTALLED_VER != *"${SERVER_VERSION}"* ]]; then
                  echo "Wrong version has been installed. Expected: $SERVER_VERSION, Installed: $INSTALLED_VER"
                  exit 1
              else
                  echo "Successfully installed the server: $INSTALLED_VER"
              fi
